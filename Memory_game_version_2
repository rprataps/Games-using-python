# Memory
# Need to select pair of the exposed and the only 
# unpaired card.

#Ravi Pratap Singh
#There are some corner bugs and game can be improved further

import simplegui
import random

CANVAS_WIDTH = 800
CANVAS_HEIGHT = 150

TOTAL_CARDS = 16
PAIRS = TOTAL_CARDS/2
RECT_WIDTH = CANVAS_WIDTH // TOTAL_CARDS

first = TOTAL_CARDS
second = TOTAL_CARDS
flag = 0
turns = 0
text = "Memory Game: 16 turns & 30 secs"
time = 0

x1 = [0,0]
x2 = [0,CANVAS_HEIGHT]
x3 = [RECT_WIDTH, CANVAS_HEIGHT]
x4 = [RECT_WIDTH,0]

deck = range(TOTAL_CARDS)
seen_list = []

# helper function to initialize globals
def new_game():
    global deck,seen_list,flag,turns,timer,time,clock
    timer.start()
    clock.set_text("Clock = 0 seconds")
    label.set_text("Turns = 0")
    time = 0
    turns = 0
    flag = 0
    seen_list = []
    random.shuffle(deck)
     
# define event handlers
def mouseclick(pos):
    global PAIRS
    global seen_list,deck,flag,first,second,turns
    t = pos[0]/RECT_WIDTH    
    if t not in seen_list:
        flag += 1
        if flag == 1:
            first = t
        elif flag == 2:
            second = t
            turns += 1
            label.set_text("Turns = " + str(turns))
            if (deck[second]%PAIRS) == (deck[first]%PAIRS):
                flag = 0
        else:
            seen_list.pop()
            seen_list.pop()
            flag = 1
            first = t
        seen_list.append(t)

def tick():
    global text, time
    if time == 2:
        text = "          Countdown : 1"
    elif  time == 3:
        text = "          Countdown : 2"
    elif  time == 4:
        text = "          Countdown : 3"
    elif  time == 5:
        text = "   Your Time Starts Now"
    elif time > 5:
        clock.set_text("Clock = " + str(time-5) + " seconds")
    time += 1
    
     
# cards are logically 50x100 pixels in size    
def draw(canvas):
    global PAIRS,TOTAL_CARDS,frame,seen_list
    global flip,deck,check,seen_list,text,time,turns
    num = len(seen_list)
    if turns < TOTAL_CARDS and time <=5 and num < TOTAL_CARDS:
        frame.set_canvas_background('Red')
        canvas.draw_text(text,(CANVAS_WIDTH * 0.05,CANVAS_HEIGHT * 0.7), 50, "white")
    if time > 5 and time <= 35 and turns < TOTAL_CARDS and num < TOTAL_CARDS:
        for i in deck:
            length = RECT_WIDTH * i
            canvas.draw_polygon([(x1[0]+length,x1[1]), (x2[0]+length,x2[1]), (x3[0]+length,x3[1]), (x4[0]+length,x4[1])], 1, "black", "green")
        for i in seen_list:
            canvas.draw_polygon([(x1[0]+length,x1[1]), (x2[0]+length,x2[1]), (x3[0]+length,x3[1]), (x4[0]+length,x4[1])], 1, "white", "black")
            length = RECT_WIDTH * i
            disp_num = str(deck[i]%PAIRS)
            if deck[i]%PAIRS < 10:
                canvas.draw_text(disp_num,((x1[0] + length + RECT_WIDTH*0.3),CANVAS_HEIGHT * 0.7), 800/TOTAL_CARDS, "white")
            else:
                canvas.draw_text(disp_num,((x1[0] + length),CANVAS_HEIGHT * 0.7), 800/TOTAL_CARDS, "white")
    if turns >= TOTAL_CARDS or time > 35 and num < TOTAL_CARDS:
        frame.set_canvas_background('Black')
        canvas.draw_text("You need to improve your memory power!",(CANVAS_WIDTH * 0.1,CANVAS_HEIGHT * 0.7), 30, "red")  
    if turns >= PAIRS and num == TOTAL_CARDS:
        frame.set_canvas_background('Black')
        canvas.draw_text("You have a sharp memory power!",(CANVAS_WIDTH * 0.1,CANVAS_HEIGHT * 0.7), 30, "red")     
        
# create frame and add a button and labels
global frame,timer
frame = simplegui.create_frame("Memory", CANVAS_WIDTH, CANVAS_HEIGHT)
frame.add_button("Reset", new_game)
timer = simplegui.create_timer(1000, tick)
label = frame.add_label("Turns = 0")
clock = frame.add_label("Clock = 0 seconds")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()
timer.start()
